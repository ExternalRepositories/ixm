# This is where the really important settings are placed. Here we set
# CMAKE_Rust_CREATE_SHARED_LIBRARY
# CMAKE_Rust_CREATE_SHARED_MODULE
# CMAKE_Rust_CREATE_STATIC_LIBRARY
# CMAKE_Rust_COMPILE_OBJECT
# CMAKE_Rust_LINK_EXECUTABLE
# Because we're using rustc directly, we'll have to do some trickery

set(CMAKE_Rust_OUTPUT_EXTENSION .o)

set(CMAKE_Rust_COMMON_SHARED
  "<CMAKE_Rust_COMPILER> <CMAKE_SHARED_LIBRARY_Rust_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_Rust_FLAGS>")

if (NOT CMAKE_Rust_CREATE_SHARED_LIBRARY)
  set(CMAKE_Rust_CREATE_SHARED_LIBRARY "${CMAKE_Rust_COMMON_SHARED} --crate-type dylib")
endif()

if (NOT CMAKE_Rust_CREATE_SHARED_MODULE)
  set(CMAKE_Rust_CREATE_SHARED_MODULE "${CMAKE_Rust_COMMON_SHARED} --crate-type cdylib") 
endif()

if (NOT CMAKE_Rust_COMPILE_OBJECT)
  set(CMAKE_Rust_COMPILE_OBJECT
    "<CMAKE_Rust_COMPILER> <DEFINES> <INCLUDES> <FLAGS> --crate-type statclib --emit obj -o <OBJECT> <SOURCE>")
endif()

if (NOT CMAKE_Rust_LINK_EXECUTABLE)
  set(CMAKE_Rust_LINK_EXECUTABLE
    "<CMAKE_Rust_COMPILER> <FLAGS> <CMAKE_Rust_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
endif()
