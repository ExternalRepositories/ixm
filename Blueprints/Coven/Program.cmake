include_guard(GLOBAL)

function (coven_program_init)
  coven_program_create_main_target()
  coven_program_create_bin_targets()
  coven_program_create_dir_targets()
endfunction ()

function (coven_program_create_main_target)
  if (NOT IS_DIRECTORY "${PROJECT_SOURCE_DIR}/src")
    return()
  endif()
  file(GLOB files CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/src/main.*")
  if (NOT files)
    return()
  endif()
  set(target ${PROJECT_NAME}-main)
  add_executable(${target})
  add_executable(${PROJECT_NAME}::main ALIAS ${target})
  target_sources(${target} PRIVATE ${files})
  target_link_libraries(${target}
    PRIVATE $<TARGET_NAME_IF_EXISTS:${PROJECT_NAME}::${PROJECT_NAME}>)
  set_property(TARGET ${PROJECT_NAME}-main PROPERTY OUTPUT_NAME ${PROJECT_NAME})
endfunction()

function (coven_program_create_bin_targets)
  if (NOT IS_DIRECTORY "${PROJECT_SOURCE_DIR}/src/bin")
    return()
  endif()
  file(GLOB files CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/src/bin/*")
  foreach (file IN LISTS files)
    get_filename_component(name "${file}" NAME_WE)
    set(target ${PROJECT_NAME}-bin-${name})
    add_executable(${target} ${file})
    add_executable(${PROJECT_NAME}::bin::${name} ALIAS ${target})
    target_link_libraries(${target} PRIVATE
      $<TARGET_NAME_IF_EXISTS:${PROJECT_NAME}::${PROJECT_NAME}>)
    set_property(TARGET ${target} PROPERTY OUTPUT_NAME ${name})
    list(APPEND to-install ${target})
    # XXX: These should only be installed if PROJECT_STANDALONE is true
  endforeach()
  if (PROJECT_STANDALONE)
    install(TARGETS ${to-install})
  endif()
endfunction()

function (coven_program_create_dir_targets)
  glob(mains FILES_ONLY "${PROJECT_SOURCE_DIR}/src/*/main.*")
  if (NOT mains)
    return()
  endif()
  foreach (main IN LISTS mains)
    file(RELATIVE_PATH main ${PROJECT_SOURCE_DIR} ${main})
  endforeach()
endfunction()
