include_guard(GLOBAL)

include(CMakePushCheckState)
include(CheckCXXSymbolExists)
include(CheckSymbolExists)

function (check_symbol_exists symbol variable)
  argparse(OPTIONS QUIET
    VALUES LANGUAGE
    GROUPS FLAGS DEFINITIONS INCLUDES LIBRARIES HEADERS)
  cmake_push_check_state()
  set(CMAKE_REQUIRED_DEFINITIONS ${ARG_DEFINITIONS})
  set(CMAKE_REQUIRED_LIBRARIES ${ARG_LIBRARIES})
  set(CMAKE_REQUIRED_INCLUDES ${ARG_INCLUDES})
  set(CMAKE_REQUIRED_FLAGS ${ARG_FLAGS})
  get(CMAKE_REQUIRED_QUIET ARG_QUIET OFF)
  if (ARG_LANGUAGE STREQUAL "CXX")
    check_cxx_symbol_exists(${symbol} ${ARG_HEADERS} ${variable})
  elseif (ARG_LANGUAGE STREQUAL "C")
    _check_symbol_exists(${symbol} ${ARG_HEADERS} ${variable})
  else()
    error("LANGUAGE parameter must be either: CXX C")
  endif()
  cmake_pop_check_state()
  parent_scope(${variable})
endfunction()
