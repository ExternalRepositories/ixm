include_guard(GLOBAL)

#[[ Verifies arguments for acquire functions are valid ]]
function (ixm_acquire_verify_args)
  if (DEFINED ARG_TARGET AND DEFINED ARG_TARGETS)
    error("IXM::AD: Cannot pass both TARGET and TARGETS")
  endif()
  if (DEFINED ARG_POLICIES)
    foreach(policy IN LIST ARG_POLICIES)
      if (NOT POLICY ${policy})
        error("IXM::AD: ${policy} is not a valid policy in the form of CMP<NNNN>")
      endif()
    endforeach()
  endif()
  foreach (arg IN LISTS ARGN)
    if (NOT DEFINED ARG_${arg})
      error("IXM::AD: Argument list missing named parameter '${arg}'")
    endif()
  endforeach()
endfunction()

#[[ Sets all options in a key-value pair system ]]
function (ixm_acquire_apply_settings)
  set(settings ${ARGN})
  if (NOT settings)
    return()
  endif()
  list(LENGTH settings length)
  math(EXPR length "${length} - 1")
  foreach (begin RANGE 0 ${length} 2)
    list(SUBLIST settings ${begin} 2 kv)
    list(GET kv 0 key)
    list(GET kv 1 value)
    if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
      set(${key} ${value} PARENT_SCOPE)
    else()
      boolean(${key} ${value})
    endif()
  endforeach()
endfunction()

#[[ Sets all policies in a key-value pair system ]]
function (ixm_acquire_apply_policies)
  if (NOT policies)
    return()
  endif()
  list(LENGTH policies length)
  math(EXPR length "${length} - 1")
  foreach (begin RANGE 0 ${length} 2)
    list(SUBLIST policies ${begin} 2 kv)
    list(GET kv 0 key)
    list(GET kv 1 value)
  endforeach()
endfunction()

#[[ Copies possible patch files for overrides ]]
function (ixm_acquire_apply_patch alias)
  set(pkg_src "${${alias}_SOURCE_DIR}/CMakeLists.txt")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/.cmake/patch/${alias}.cmake")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/cmake/patch/${alias}.cmake")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/${alias}.cmake")
  if (EXISTS ${pkg_src})
    return()
  endif()
  foreach (file IN LISTS patches)
    if (EXISTS file)
      set(patch_file ${file})
      break()
    endif()
  endforeach()
  if (NOT DEFINED patch_file)
    error("IXM::AD: Could not locate patch file for ${alias}")
  endif()
  info("IXM::AD: Patching - ${alias} with ${patch_file}")
  configure_file(${patch_file} ${pkg_src} COPYONLY)
endfunction()

#[[ Sets alias for single target if possible ]]
function (ixm_acquire_apply_target target alias)
  if (DEFINED ARG_TARGETS)
    add_library(${target} INTERFACE)
    target_link_libraries(${target} INTERFACE ${ARG_TARGETS})
  endif()
  if (NOT TARGET ${target})
    error("IXM::AD: '${target}' is not a valid TARGET")
  endif()
  if (NOT TARGET ${alias}::${alias})
    add_library(${alias}::${alias} ALIAS ${target})
  endif()
endfunction()


