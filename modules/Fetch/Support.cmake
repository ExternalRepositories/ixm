include_guard(GLOBAL)

# [[ Turn pkg specifier into name, repo, tag ]]
function (ixm_fetch_recipe recipe)
  string(REPLACE "@" ";" result ${recipe})
  list(APPEND result HEAD) # small trick to make sure we safely get this
  list(GET result 0 repository)
  list(GET result 1 tag)
  get_filename_component(name ${repository} NAME)
  parent_scope(name repository tag)
endfunction()

#[[ Sets all policies in a key-value pair system ]]
function (ixm_fetch_apply_policies)
  set(policies ${ARGN})
  if (NOT policies)
    return()
  endif()
  list(LENGTH settings length)
  math(EXPR length "${length} - 1")
  foreach(begin RANGE 0 ${length} 2)
    list(SUBLIST policies ${begin} 2 kv)
    list(GET kv 0 key)
    list(GET kv 1 value)
  endforeach()
endfunction()

#[[ Sets all options in a key-value pair system ]]
function (ixm_fetch_apply_options)
  set(settings ${ARGN})
  if (NOT settings)
    return()
  endif()
  list(LENGTH settings length)
  math(EXPR length "${length} - 1")
  foreach (begin RANGE 0 ${length} 2)
    list(SUBLIST settings ${begin} 2 kv)
    list(GET kv 0 key)
    list(GET kv 1 value)
    set(${key} ${value} PARENT_SCOPE)
  endforeach()
endfunction()


#[[ Copies possible patch files for overrides ]]
function (ixm_fetch_apply_patch alias)
  set(src "${${alias}_SOURCE_DIR}/CMakeLists.txt")
  list(APPEND patches "${PATCH}")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/.cmake/patch/${alias}.cmake")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/cmake/patch/${alias}.cmake")
  list(APPEND patches "${PROJECT_SOURCE_DIR}/${alias}.cmake")
  if (EXISTS ${src} AND NOT DEFINED PATCH)
    return()
  endif()
  foreach(file IN LISTS patches)
    if (EXISTS ${file})
      set(patch ${file})
      break()
    endif()
  endforeach()
  if (NOT DEFINED patch)
    fatal("Could not locate patch file for '${alias}'")
  endif()
  info("[PATCH]: ${alias} with ${patch}")
  configure_file(${patch} ${src} COPYONLY)
endfunction()

#[[ Sets alias for single target if possible ]]
function(ixm_fetch_apply_target target alias)
  if (DEFINED TARGETS)
    add_library(${target} INTERFACE)
    target_link_libraries(${target} INTERFACE ${TARGETS})
  endif()
  if (NOT TARGET ${target})
    fatal("'${target}' is not a valid TARGET")
  endif()
  if (NOT TARGET ${alias}::${alias})
    add_library(${alias}::${alias} ALIAS ${target})
  endif()
  foreach (target IN LISTS TARGETS)
    if (NOT TARGET ${alias}::${target})
      add_library(${alias}::${target} ALIAS ${target})
    endif()
  endforeach()
endfunction()
