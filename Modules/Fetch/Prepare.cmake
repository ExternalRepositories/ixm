include_guard(GLOBAL)

#[[ Sets 'provider' and 'package' variables in calling scope ]]
function (ixm_fetch_prepare_reference reference)
  string(REGEX MATCH "([^{]+){(.+)}" matched "${reference}")
  if (NOT matched)
    error("fetch() called with an incorrect dependency reference '${reference}'")
  endif()
  set(provider ${CMAKE_MATCH_1} PARENT_SCOPE)
  set(package ${CMAKE_MATCH_2} PARENT_SCOPE)
endfunction()

#[[ Gets the 'name' of the package, as this is for pre-invoke stuff ]]
function (ixm_fetch_prepare_name package)
  string(REPLACE "@" ";" result ${package})
  list(GET result 0 resource)
  string(REPLACE "/" ";" result ${resource})
  list(GET result -1 name)
  upvar(name)
endfunction()

#[[ Gets the 'command' for the given provider ]]
function (ixm_fetch_prepare_command provider)
  get_property(command GLOBAL PROPERTY IXM_FETCH_${provider})
  if (NOT command)
    error("Could not find global property 'IXM_FETCH_${provider}'")
  endif()
  if (NOT COMMAND ${command})
    error("IXM_FETCH_${provider} does not point to an existing command")
  endif()
  upvar(command)
endfunction()

function (ixm_fetch_prepare_recipe provider recipe)
  set(property-name IXM_FETCH_${provider}_RECIPE)
  set(fallback-name IXM_FETCH_${provider}_DEFAULT)
  get_property(type GLOBAL PROPERTY ${property-name})
  get_property(default GLOBAL PROPERTY ${fallback-name})
  if (NOT type)
    error("Could not find global property '${property-name}'")
  endif()
  if (type STREQUAL "ADVANCED")
    ixm_fetch_recipe_advanced(${recipe} "${default}")
  elseif (type STREQUAL "BASIC")
    ixm_fetch_recipe_basic(${recipe} "${default}")
  else ()
    error("Unknown recipe type '${type}' for ${property-name}")
  endif()
  upvar(root name tag)
endfunction()

function (ixm_fetch_prepare_dict name)
  dict(KEYS ${name} keys)
  foreach (key IN LISTS keys)
    dict(GET ${name} ${key} ${key})
    upvar(${key})
  endforeach()
endfunction()
