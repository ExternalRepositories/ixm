include_guard(GLOBAL)

#[[ Returns the regex needed to find providers ]]
function (ixm_fetch_prepare_regex var)
  get_property(PROVIDERS GLOBAL PROPERTY IXM_FETCH_PROVIDERS)
  if (NOT PROVIDERS)
    error("IXM_FETCH_PROVIDERS property is empty! Cannot Fetch() dependencies")
  endif()
  foreach (provider IN LISTS PROVIDERS)
    string(REGEX REPLACE "([A-Z])" "\[\\1\]" prepared ${provider})
    list(APPEND providers ${prepared})
  endforeach()
  list(JOIN providers "|" providers)
  set(${var} ${providers} PARENT_SCOPE)
endfunction()

#[[ Creates 3 variables: command, package, options ]]
function (ixm_fetch_prepare_parameters)
  ixm_fetch_prepare_regex(providers)
  string(REGEX MATCH "(${providers}){([^,]*)[,]?(.*)?}" match "${ARGN}")
  if (NOT CMAKE_MATCH_1 AND NOT CMAKE_MATCH_2)
    error("Fetch() called with an incorrect dependency reference")
  endif()
  set(command ${CMAKE_MATCH_1} PARENT_SCOPE)
  set(package ${CMAKE_MATCH_2} PARENT_SCOPE)
  set(options ${CMAKE_MATCH_3} PARENT_SCOPE)
endfunction()

function (ixm_fetch_prepare_command var name)
  get_property(command GLOBAL PROPERTY IXM_FETCH_${name})
  if (NOT command)
    error("Could not find global property IXM_FETCH_${name}")
  endif()
  if (NOT COMMAND ${command})
    error("IXM_FETCH_${name} property does not point to an existing command")
  endif()
  set(${var} ${command} PARENT_SCOPE)
endfunction()

function (ixm_fetch_prepare_options var options)
  if (NOT options)
    return()
  endif()
  # Thank the void the 60s were a thing, eh? :)
  string(ASCII 30 rs) #record-separator
  string(ASCII 31 us) #unit-separator
  string(REPLACE ";" "${us}" options "${options}")
  string(REPLACE "," "${rs}" options "${options}")
  string(REPLACE "${us}${us}" "" options "${options}")
  string(REPLACE "${rs}" ";" options "${options}")
  foreach (option IN LISTS options)
    string(REPLACE ":" ";" kv ${option})
    list(GET kv 0 key)
    list(LENGTH kv length)
    if (length EQUAL 1)
      list(APPEND kv "")
    endif()
    list(GET kv 1 val)
    string(REPLACE "${us}" ";" val "${val}")
    list(APPEND arguments ${key} ${val})
  endforeach()
  set(${var} ${arguments} PARENT_SCOPE)
endfunction()
