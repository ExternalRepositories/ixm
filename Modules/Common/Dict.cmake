include_guard(GLOBAL)

function (dict action name)
  if (action STREQUAL LOAD)
    ixm_dict_load(${name} ${ARGN})
  elseif (action STREQUAL SAVE)
    ixm_dict_save(${name} ${ARGN})
  elseif (action STREQUAL EXTRACT) # GET + REMOVE in one function
  elseif (action STREQUAL INSERT)
    ixm_dict_insert(${name} ${ARGN})
  elseif (action STREQUAL REMOVE)
  elseif (action STREQUAL MERGE)
    ixm_dict_merge(${name} ${ARGN})
  elseif (action STREQUAL KEYS)
    ixm_dict_keys(${name} ${ARGN})
  elseif (action STREQUAL GET)
    ixm_dict_get(${name} ${ARGN})
  else()
    #error("dict(${action}) is an invalid operation")
  endif()
endfunction()

macro (ixm_dict_noop name)
  if (NOT TARGET ${name})
    return()
  endif()
endmacro()

function (ixm_dict_create name)
  if (NOT TARGET ${name})
    add_library(${name} INTERFACE IMPORTED)
  endif()
endfunction()

function (ixm_dict_load name)
  parse(${ARGN} @ARGS=1 FROM)
  ixm_dict_create(${name})
  if (NOT FROM)
    error("dict(LOAD) missing 'FROM' parameter")
  endif()
  if (NOT EXISTS "${FROM}")
    return()
  endif()
  file(READ "${FROM}" data)
  string(ASCII 29 group)
  string(ASCII 30 record)
  string(ASCII 31 unit)
  string(REPLACE "${group}" ";" data "${data}")
  foreach (entry IN LISTS data)
    string(REPLACE "${record}" ";" entry "${entry}")
    list(GET entry 0 key)
    list(GET entry 1 val)
    string(REPLACE "${unit}" ";" val "${val}")
    dict(INSERT ${name} ${key} ${val})
  endforeach()
endfunction()

function (ixm_dict_save name)
  parse(${ARGN} @ARGS=1 INTO)
  if (NOT INTO)
    error("dict(SAVE) missing 'INTO' parameter")
  endif()
  ixm_dict_noop(${name})
  dict(KEYS ${name} keys)
  string(ASCII 29 group)
  string(ASCII 30 record)
  string(ASCII 31 unit)
  foreach (key IN LISTS keys)
    dict(GET ${name} ${key} value)
    if (value)
      string(REPLACE ";" "${unit}" value "${value}")
      list(APPEND output "${key}${record}${value}")
    endif()
  endforeach()
  list(JOIN output "${group}" output)
  file(WRITE ${INTO} "${output}")
endfunction()

function (ixm_dict_insert name key)
  parse(${ARGN} @FLAGS STRING APPEND ASSIGN)
  if (NOT REMAINDER)
    error("dict(INSERT) requires at least one value to be inserted")
  endif()
  if (STRING)
    set(action APPEND_STRING)
  elseif (APPEND)
    set(action APPEND)
  else()
    set(action)
  endif()
  ixm_dict_create(${name})
  set_property(TARGET ${name} ${action} PROPERTY "INTERFACE_${key}" ${REMAINDER})
  # This is for some basic bookkeeping.
  dict(KEYS ${name} keys)
  list(FIND keys ${key} index)
  if (index EQUAL -1)
    string(ASCII 192 c0)
    set_property(TARGET ${name} APPEND PROPERTY "INTERFACE_${c0}" "${key}")
  endif()
endfunction()

function (ixm_dict_remove name)
  if (NOT ARGN)
    error("dict(REMOVE) requires at least one key to be removed")
  endif()
  ixm_dict_noop(${name})
  dict(KEYS ${name} keys)
  list(REMOVE_ITEM keys ${$ARGN})
  set_property(TARGET ${name} PROPERTY "INTERFACE_${c0}" ${keys})
  foreach (key IN LISTS ARGN)
    set_property(TARGET ${name} PROPERTY "INTERFACE_${key}")
  endforeach()
endfunction()

function (ixm_dict_merge name)
endfunction()

# macro because dict() is a function
macro (ixm_dict_keys name var)
  ixm_dict_noop(${name})
  # This is a valid *byte* but is an invalid utf-8 character :)
  string(ASCII 192 c0)
  get_property(${var} TARGET ${name} PROPERTY "INTERFACE_${c0}")
  upvar(${var})
endmacro()

# Macro because dict() is a function
macro (ixm_dict_get name key var)
  ixm_dict_noop(${name})
  get_property(${var} TARGET ${name} PROPERTY "INTERFACE_${key}")
  upvar(${var})
endmacro()

function (ixm_dict_create target)
  parse(${ARGN} @ARGS=? FROM)
  if (NOT TARGET ${target})
    add_library(${target} INTERFACE IMPORTED)
  endif()
  if (EXISTS "${FROM}")
    dict(READ ${target} "${FROM}")
  endif()
endfunction()

