include_guard(GLOBAL)

import(IXM::Property::Target::Generate)

#[[
The following was sent to me from Robert Schumaker from MS regarding cpprest
if(MSVC)
  get_target_property(_srcs cpprest SOURCES)

  if(NOT CMAKE_GENERATOR MATCHES "Visual Studio .*")
    set_property(SOURCE pch/stdafx.cpp APPEND PROPERTY OBJECT_OUTPUTS "${CMAKE_CURRENT_BINARY_DIR}/stdafx.pch")
    set_property(SOURCE ${_srcs} APPEND PROPERTY OBJECT_DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/stdafx.pch")
  endif()

  set_source_files_properties(pch/stdafx.cpp PROPERTIES COMPILE_FLAGS "/Ycstdafx.h")
  target_sources(cpprest PRIVATE pch/stdafx.cpp)
  target_compile_options(cpprest PRIVATE /Yustdafx.h)
endif()
]]

# TODO: Support MSVC PCH Generation
# TODO: Support per-language generation
function (ixm_target_generate_pch target)
  ixm_target_generate_rsp(${target})
  # TODO: Add this in as a generataor expression, please~
  get_property(pch TARGET ${target} PROPERTY PRECOMPILED_HEADER)

  genex(non-msvc $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-x c++-header -o>)
  #genex(msvc $<$<CXX_COMPILER_ID:MSVC>:>

  add_custom_command(
    OUTPUT ${pch}
    DEPENDS $<TARGET_PROPERTY:${target},RESPONSE_FILE>
    COMMAND "${CMAKE_CXX_COMPILER}"
      "@$<TARGET_PROPERTY:${target},RESPONSE_FILE>"
      ${non-msvc}
      ${pch}
      $<TARGET_PROPERTY:${target},PRECOMPILED_HEADER_SOURCE>
    COMMENT "Generating PCH '${pch}' for '${target}'"
    COMMAND_EXPAND_LISTS
    VERBATIM)
  target_sources(${target}
    PRIVATE
      $<TARGET_PROPERTY:${target},PRECOMPILED_HEADER_SOURCE>)
  target_compile_options(${target}
    PRIVATE
      $<$<CXX_COMPILER_ID:MSVC>:/Y${hdr}>
      $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Winvalid-pch>
      $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-include ${hdr}>)
endfunction()
  #
  ## TODO: Support per-language generation
  #function (ixm_target_generate_unity target)
  #  parse(${ARGN} @ARGS=? LANGUAGE)
  #  var(LANGUAGE LANGUAGE "CXX")
  #  set(unity-sources $<TARGET_PROPERTY:${target},UNITY_SOURCES>)
  #  genex(unity-sources $<
  #    $<BOOL:${unity-sources}>:
  #    "#include <"
  #    $<JOIN:${unity-sources},
  #      "$<ANGLE-R>\n#include<>"
  #    >
  #  >)
  #  string(TOLOWER "${LANGUAGE}" extension)
  #  genex(unity-build-file $<TARGET_PROPERTY:${target},UNITY_BUILD_FILE>)
  #  genex(unity-build-file $<IF:$<BOOL:${unity-build-file}>,
  #    ${unity-build-file},
  #    ${CMAKE_CURRENT_BINARY_DIR}/IXM/Unity/${target}.${extension}
  #  >)
  #  string(JOIN "\n" content
  #    "/* GENERATED BY IXM. DO NOT EDIT */"
  #    ${unity-sources})
  #  file(GENERATE
  #    OUTPUT "${unity-build-file}"
  #    CONTENT "${content}"
  #    CONDITION $<BOOL:$<TARGET_PROPERTY:${target},UNITY_BUILD>>)
  #endfunction()
  #
  #function (ixm_target_generate_proto target)
  #  set(MKDIR_COMMAND ${CMAKE_COMMAND} -E make_directory)
  #  set(error-format $<$<CXX_COMPILER_ID:MSVC>:--error_format=msvs>)
  #  genex(protobuf-output-dir $<TARGET_PROPERTY:${target},PROTOBUF_OUTPUT_DIR>)
  #  genex(protobuf-path $<TARGET_PROPERTY:${target},PROTOBUF_PATH>)
  #  genex(protobuf-path $<
  #    $<BOOL:${protobuf-path}>:--proto_path=$<JOIN:${protobuf-path}>
  #  >)
  #  genex(protobuf-output-dir $<IF:$<BOOL:${protobuf-output-dir}>,
  #    ${protobuf-output-dir},
  #    ${CMAKE_CURRENT_BINARY_DIR}/IXM/protobuf/${target}
  #  >)
  #  add_custom_command(
  #    COMMAND ${MKDIR_COMMAND} ${protobuf-output-dir}
  #    COMMAND Protobuf::Compiler # TODO: Set something up to find this
  #      ${error-format}
  #      --cpp_out=${protobuf-output-dir}
  #      ${protobuf-path}
  #    COMMENT "Generating protobuf sources for '${target}'"
  #    COMMAND_EXPAND_LISTS
  #    VERBATIM)
  #  target_include_directories(${target} PRIVATE ${protobuf-output-dir})
  #endfunction()

# TODO: Support INTERFACE libraries
#function (ixm_target_generate_rsp target)
#  parse(${ARGN} @ARGS=? LANGUAGE)
#  var(LANGUAGE LANGUAGE CXX)
#  get_property(rsp TARGET ${target} PROPERTY RESPONSE_FILE)
#  if (NOT rsp)
#    set(outut "${CMAKE_CURRENT_BINARY_DIR}/IXM/${target}.rsp")
#    set_property(TARGET ${target} PROPERTY RESPONSE_FILE "${output}")
#  endif()
#  ixm_target_generate_rsp_genex(compile-flags ${target})
#  genex(release-flags $<$<CONFIG:Release>:${CMAKE_${LANGUAGE}_FLAGS_RELEASE})
#  genex(debug-flags $<$<CONFIG:Debug>:${CMAKE_${LANGUAGE}_FLAGS_DEBUG})
#  set(flags "${CMAKE_${LANGUAGE}_FLAGS}")
#
#  string(JOIN "\n" content
#    ${compile-flags}
#    ${release-flags}
#    ${debug-flags}
#    ${flags})
#
#  file(GENERATE
#    OUTPUT $<TARGET_PROPERTY:${target},RESPONSE_FILE>
#    CONTENT ${content})
#endfunction()

function (ixm_target_generate_rsp_genex out-var target)
  set(include-directories $<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>)
  set(compile-definitions $<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>)
  set(compile-options $<TARGET_PROPERTY:${target},COMPILE_OPTIONS>)
  set(compile-flags $<TARGET_PROPERTY:${target},COMPILE_FLAGS>)
  genex(include-directories $<
      $<BOOL:${include-directories}>:-I
      $<JOIN:${include-directories},"\n-I">
  >)

  genex(compile-definitions $<
      $<BOOL:${compile-definitions}:-D
      $<JOIN:${compile-definitions},"\n-D">
  >)

  genex(compile-options $<
    $<BOOL:${compile-options}>:$<JOIN:${compile-options},"\n">
  >)

  genex(COMPILE_FLAGS $<
    $<BOOL:${compile-flags}>:$<JOIN:${compile-flags},"\n">
  >)

  list(APPEND output ${include-directories})
  list(APPEND output ${compile-definitions})
  list(APPEND output ${compile-options})
  list(APPEND output ${compile-flags})
  set(${out-var} ${output} PARENT_SCOPE)
endfunction()
