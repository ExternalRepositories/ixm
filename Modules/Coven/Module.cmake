include_guard(GLOBAL)

#[[
This is for generating unity builds on a per-directory (aka, a "legacy
module") basis. This is ONLY for directories that are:
 * Not located at 'src/bin'
 * Do not have a src/**/main.{ext} file
 * Still relying on headers

Some things need to be answered:

 * How to be signify that a given directory should note be treated as a unity
   build?
 * How can we better document the behavior so that after not touching this code
   for a while the average person can understand it?
 * How to determine whether to generate a C PCH vs a C++ PCH?
 * What settings are we missing when generating the response file?
 * Should generating a response file be possible from anywhere?
]]

#[[ Sets variables for use throughout the module generator ]]
macro(ixm_coven_module_vars path)
  file(RELATIVE_PATH path "${PROJECT_SOURCE_DIR}/src" "${path}")
  string(REPLACE "/" "::" alias ${PROJECT_NAME}::${path})
  string(REPLACE "/" "-" target ${PROJECT_NAME}-${path})
  string(REPLACE "/" "_" flag ${PROJECT_NAME}_BUILD_MODULE_${name})
  string(TOUPPER "${flag}" flag)
  set(ixm "${PROJECT_BINARY_DIR}/IXM")
  set(hdr "${PROJECT_SOURCE_DIR}/src/${path}/module") # NAME_WE
  set(src "${ixm}/${path}.cxx")
  set(rsp "${ixm}/${path}.rsp")
  set(pch "${ixm}/${path}.gch")
endmacro()

#[[ Generates a response file for creating a precompiled header ]]
macro (ixm_coven_module_rsp path)
  set(INCLUDE_DIRECTORIES "$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>")
  set(COMPILE_DEFINITIONS "$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>")
  set(COMPILE_OPTIONS "$<TARGET_PROPERTY:${target},COMPILE_OPTIONS>")
  set(COMPILE_FLAGS "$<TARGET_PROPERTY:${target},COMPILE_FLAGS>")
  set(INCLUDE_DIRECTORIES "$<$<BOOL:${INCLUDE_DEFINITIONS}>:-D$<JOIN:${INCLUDE_DEFINITIONS},\n-I>>")
  set(COMPILE_DEFINITIONS "$<$<BOOL:${COMPILE_DEFINITIONS}>:-D$<JOIN:${COMPILE_DEFINITIONS},\n-D>>")
  set(COMPILE_OPTIONS "$<$<BOOL:${COMPILE_OPTIONS}>:$<JOIN:${COMPILE_OPTIONS},\n>>")
  set(COMPILE_FLAGS "$<$<BOOL:${COMPILE_FLAGS}>:$<JOIN:${COMPILE_FLAGS},\n>>")
  string(JOIN "\n" content
    ${CMAKE_CXX_FLAGS}
    ${INCLUDE_DIRECTORIES}
    ${COMPILE_DEFINITIONS}
    ${COMPILE_OPTIONS}
    ${COMPILE_FLAGS})
  file(GENERATE OUTPUT ${rsp} CONTENT ${content})
endmacro()

#[[
  Given a path, it generates an OBJECT library that represents the sources for
  a given directory. This is used to generate a unity build, or to keep sources
  better organized.
]]
function (ixm_coven_generate_module path)
  ixm_coven_module_vars(${path})
  option(${flag} "Build ${alias} as a unity build" ON)
  add_library(${target} OBJECT)
  add_library(${alias} ALIAS ${target})
  target_include_directories(${target} PRIVATE "${ixm}/${path}")
endfunction()

#[[ Generates a unity-build *.cxx file if possible ]]
function (ixm_coven_generate_unity path)
  ixm_coven_module_vars(${path})
  set(COMMENT "/* Generated by IXM::Coven. Any edits made may be lost */")
  # TODO: Need to get ALL *proper* file extensions :)
  file(GLOB sources
    LIST_DIRECTORIES OFF
    RELATIVE ${PROJECT_SOURCE_DIR}
    CONFIGURE_DEPENDS "${path}/*.*")
  file(RELATIVE_PATH path "${PROJECT_SOURCE_DIR}/src" "${path}")
  string(JOIN "\n" content
    ${COMMENT}
    "$<$<BOOL:${sources}>:#include <$<JOIN:${sources},$<ANGLE-R>\n#include<>>>")
  file(GENERATE OUTPUT ${src} CONTENT ${content} CONDITION $<BOOL:${flag}>)
  target_sources(${target}
    PRIVATE
      $<IF:$<BOOL:${flag}>,${src},${sources}>)
endfunction()

function (ixm_coven_generate_pch path)
  ixm_coven_module_vars(${path})
  # Here, we look for a file named "${path}/module.hpp". If no such file
  # exists, we return, as PCH are optional.
  # If there IS a module.{header-ext} and a module.{ext}, then we know we have
  # a pair of files for precompiling our headers. The `module.{ext}` is only
  # truly required for MSVC.
  ixm_coven_module_rsp(${path})
  add_custom_command(
    OUTPUT ${pch}
    DEPENDS ${hdr} ${rsp}
    COMMAND "${CMAKE_CXX_COMPILER}"
      "-x" "c++-header"
      "-o" "${pch}" "${hdr}" "@${rsp}" 
    COMMENT Generating "PCH for C++ legacy module '${alias}'")
  target_compile_options(${target}
    PRIVATE
      $<$<CXX_COMPILER_ID:GNU>:-Winvalid-pch>
      $<$<CXX_COMPILER_ID:GNU>:-include ${hdr}>)
  target_sources(${target}
    PRIVATE
      $<$<BOOL:${flag}>,${rsp}>)
  set_property(SOURCE ${src} APPEND PROPERTY OBJECT_DEPENDS ${rsp} ${pch})
endfunction()
